%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
name: Just
scope: source.just
version: 2
hidden: false

file_extensions:
  - .justfile
  - just
  - justfile

variables:
  validName: '[a-zA-Z_][a-zA-Z0-9_-]*'
  builtInFunctions: |
    (?x)  # ignore whitespace in this regex

      absolute_path | arch | capitalize | clean | env_var_or_default | env_var |
      error | extension | file_name | file_stem | invocation_directory |
      join | just_executable | justfile_directory | justfile | kebabcase |
      lowercamelcase | lowercase | os_family | os | parent_directory |
      path_exists | quote | replace | replace_regex | sha256_file | sha256 |
      shoutykebabcase | shoutysnakecase | snakecase | titlecase |
      trim_end_matches | trim_end_match | trim_end | trim_start_matches |
      trim_start_match | trim_start | trim | uppercase | uppercamelcase |
      uuid | without_extension

  booleanSettings: |
    (?x)
      allow-duplicate-recipes | dotenv-load | export | fallback | ignore-comments |
      positional-arguments | windows-powershell
  stringSettings: |
    (?x)
      tempdir
  shellSettings: |
    (?x)
      shell | windows-shell
  recipeAttributes: |
    (?x)
      linux | macos | no-cd | no-exit-message | private | unix | windows


contexts:
  main:
    - include: settings
    - include: aliases
    - include: interpolate
    - include: comments
    - include: scripts
    - include: assignment
    - include: strings
    - include: functions
    - include: keywords
    - include: recipe-attribute
    - include: recipe-definition
    - include: recipe-content
    - include: concatenation

  aliases:
    - match: '^\s*(alias)\s+({{validName}})\s*(:=)\s+({{validName}}).*$'
      captures:
        1: support.function.export.just
        2: variable.other.just
        3: keyword.operator.assignment.just
        4: entity.name.function.just
  comments:
    # Copied from examples thread: https://github.com/sublimehq/Packages/issues/757#issuecomment-326882205
    - match: '#[^!]'
      scope: punctuation.definition.comment.just
      push:
        - meta_scope: comment.line.number-sign.just
        - match: $\n? # Consume the newline so that completions aren't shown at the end of the line when typing comments
          pop: 1
  interpolate:
    - match: '(?<!\{)\{\{(?!\{)'
      push:
        - meta_scope: string.interpolated.just
        - match: '\}\}'
          pop: 1
  functions:
    - match: \b({{builtInFunctions}})\b(?=\()
      scope: entity.name.function.just
  keywords:
    - match: \b(if|else|while)\b
      scope: keyword.control.just
  concatenation:
    - match: '\+'
      scope: keyword.operator.arithmetic.just
  conditional-tests:
    - match: \b(==|!=|=~)\b
      scope: keyword.operator.comparison.just

  #
  # Variable Assignment
  #
  assignment:
    - match: '(?=(export)?\s*\b{{validName}}\s*:=)'
      push:
        - expression-paren
        - assignment-operator
        - variable-name
        - assignment-prefix
  assignment-operator:
    - match: ':='
      scope: keyword.operator.assignment.just
      pop: 1 # Only match the first instance
    - include: else-pop
  assignment-prefix:
    - match: 'export'
      scope: keyword.declaration.variable.just
    - include: else-pop
  assignment-value:
    - match: '(?=[\(a-zA-Z_])'
      push:
        - variable-name
        - expression-paren
    - include: strings
    - include: else-pop
  expression-paren:
    - meta_scope: meta.group.just
    - match: '\('
      scope: punctuation.section.parens.begin.just
    - match: '\)'
      scope: punctuation.section.parens.end.just
      pop: 1
    - include: functions
    - include: keywords
    # - include: conditional-tests # Doesn't work
    - include: variable-name
    - include: concatenation
    - include: strings
    - include: else-pop



  #
  # Recipe definition lines, including attributes, arguments and prerequisites
  #
  recipe-attribute:
    - match: '\[\s*({{recipeAttributes}})\s*\]'
      scope: meta.annotation.just variable.annotation.just
  recipe-definition:
    - meta_scope: entity.name.function.just
    - match: '(?=^@?{{validName}}[^:]*:[^=])' # Matches 'recipeName:' but not 'varName :='
      push:
        - recipe-prerequisites
        - recipe-assignment
        - recipe-argument
        - recipe-name
        - recipe-modifier
  recipe-modifier:
    - match: '^@'
      scope: storage.modifier.just
    - include: else-pop
  recipe-assignment:
    - match: ':'
      scope: keyword.operator.assignment.just
    - include: eol-pop
    - include: else-pop
  recipe-name:
    - match: '\b{{validName}}\b'
      scope: entity.name.function.just
      pop: 1 # Only match the first instance
    - include: else-pop
  recipe-argument:
    - meta_scope: meta.function-call.arguments.just
    - match: '(?=[\+\*$a-zA-Z_])'
      push:
        - recipe-argument-assignment
        - recipe-argument-name
        - recipe-variadic-operator
        - recipe-export-operator
    - include: else-pop
  recipe-variadic-operator:
    - match: '[\+\*]'
      scope: keyword.operator.variadic.just
    - include: else-pop
  recipe-export-operator:
    - match: '\$'
      scope: keyword.operator.exported.just
    - include: else-pop
  recipe-argument-assignment:
    - match: '='
      scope: keyword.operator.assignment.just
      push:
        - variable-name
        - recipe-argument-value-quoted
    - include: else-pop
  recipe-argument-name:
    - match: '\b{{validName}}\b'
      scope: variable.parameter.just
    - include: else-pop
  recipe-argument-value-quoted:
    - include: strings
    - include: else-pop

  recipe-prerequisites:
    - match: '\b{{validName}}\b'
      scope: string.unquoted.just
    - include: eol-pop
    - include: else-pop
  recipe-content:
    - match: '^\s+(@|-|@-|-@)'
      captures:
        1: storage.modifier.just
  scripts:
    - match: '\s#\!'
      comment: The #! lines within a recipe.
      push:
        - meta_scope: support.type.property-name.just
        - match: $
          pop: 1

  #
  # "set" expressions like "set shell := ['zsh', '-cu']" and "set dotenv-load"
  #
  settings:
    - match: '\bset\b'
      scope: support.function.export.just
      push:
        - settings-boolean
        - settings-shell
        - settings-string
  settings-boolean:
    - match: '\b{{booleanSettings}}\b'
      scope: entity.other.attribute-name.just
      push:
        - constant-boolean
        - assignment-operator
    - include: else-pop
  settings-string:
    - match: '\b{{stringSettings}}\b'
      scope: entity.other.attribute-name.just
      push:
        - assignment-operator
    - include: strings
    - include: else-pop
  settings-shell:
    - match: '\b{{shellSettings}}\b'
      scope: entity.other.attribute-name.just
      push:
        - string-array
        - assignment-operator
    - include: else-pop
  constant-boolean:
    - match: '(true|false)'
      scope: constant.language.boolean.just
      pop: 1
    - include: else-pop
  string-array:
    - match: '\['
      scope: punctuation.section.brackets.start.just
    - match: ','
      scope: punctuation.separator.parameters.just
    - match: '\]'
      scope: punctuation.section.brackets.end.just
      pop: 1
    - include: strings

  #
  # General types used all over the place
  #
  variable-name:
    - match: '\b{{validName}}\b'
      scope: variable.other.just
    - include: else-pop
  strings:
    - match: '`'
      push:
        - meta_scope: string.quoted.backtick.just
        - match: \\.
          scope: constant.character.escape.just
        - match: '`'
          pop: 1
    - match: '"'
      push:
        - meta_scope: string.quoted.double.just
        - match: \\.
          scope: constant.character.escape.just
        - match: '"'
          pop: 1
    - match: "'"
      push:
        - meta_scope: string.quoted.single.just
        - match: \\.
          scope: constant.character.escape.just
        - match: "'"
          pop: 1

  #
  # Utilities
  #

  # Remove the current stack item when we're about to reach a new character
  # Learn more: https://github.com/sublimehq/Packages/issues/757#issuecomment-287193733
  else-pop:
    - match: (?=\S)
      pop: 1
  eol-pop:
    - match: '$\n?'
      pop: 1

