%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
name: Just-narrow
scope: source.just
version: 2
hidden: false

file_extensions:
  - .justfile
  - just
  - justfile

variables:
  valid_name: '[a-zA-Z_][a-zA-Z0-9_-]*'
  control_keywords: |-
    (?x:
      (?: if ) | else
    )\b

  built_in_functions: |
    (?x)  # ignore whitespace in this regex

      absolute_path | arch | capitalize | clean | env_var_or_default | env_var |
      error | extension | file_name | file_stem | invocation_directory |
      join | just_executable | justfile_directory | justfile | kebabcase |
      lowercamelcase | lowercase | os_family | os | parent_directory |
      path_exists | quote | replace | replace_regex | sha256_file | sha256 |
      shoutykebabcase | shoutysnakecase | snakecase | titlecase |
      trim_end_matches | trim_end_match | trim_end | trim_start_matches |
      trim_start_match | trim_start | trim | uppercase | uppercamelcase |
      uuid | without_extension

  boolean_settings: |
    (?x)
      allow-duplicate-recipes | dotenv-load | export | fallback | ignore-comments |
      positional-arguments | windows-powershell
  string_settings: |
    (?x)
      tempdir
  shell_settings: |
    (?x)
      shell | windows-shell
  recipe_attributes: |
    (?x)
      linux | macos | no-cd | no-exit-message | private | unix | windows


###############################################################################
# MAIN CONTEXT
###############################################################################

contexts:
  main:
    # - include: settings
    # - include: aliases
    # - include: interpolate
    - include: comments
    # - include: recipe-shebang
    - include: assignment
    # - include: function-calls
    # - include: strings
    # - include: keywords
    - include: recipe-attribute
    # - include: recipe-definition
    # - include: recipe-content
    # - include: concatenation

  prototype:
    - include: comments

 ###[ COMMENTS ]################################################################

  comments:
    - match: '#[^!]'
      scope: punctuation.definition.comment.begin.just
      push: comment-line

  comment-line:
    - meta_include_prototype: false
    - meta_scope: comment.line.number-sign.just
    - include: line-end

  # aliases:
  #   - match: '^\s*(alias)\s+({{valid_name}})\s*(:=)\s+({{valid_name}}).*$'
  #     captures:
  #       1: support.function.export.just
  #       2: variable.other.just
  #       3: keyword.operator.assignment.just
  #       4: entity.name.function.just
  # interpolate:
  #   - match: '(?<!\{)\{\{(?!\{)'
  #     push:
  #       - meta_scope: string.interpolated.just
  #       - match: '\}\}'
  #         pop: 1
  # keywords:
  #   - match: \b(if|else|while)\b
  #     scope: keyword.control.just
  # concatenation:
  #   - match: '(\+|\/)'
  #     scope: keyword.operator.arithmetic.just
  # conditional-tests:
  #   - match: \b(==|!=|=~)\b
  #     scope: keyword.operator.comparison.just


###[ STATEMENTS ]##############################################################

  just-expressions:
    - include: groups
    - include: operators
    - include: function-calls
    - include: if-statements
    - include: strings
    - include: operands-variables

  just-expression-end:
    # Pop nested expression contexts if control keywords are matched.
    - match: (?=;|{{control_keywords}})
      pop: 1


###[ FUNCTION CALL ]###########################################################

  function-calls:
    - match: '{{built_in_functions}}\s*(?=\()'
      scope:
        meta.function-call.identifier.just
        support.function.just
      push: function-call-arguments

  function-call-arguments:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.group.begin.just
      set: function-call-arguments-body

  function-call-arguments-body:
    - meta_scope: meta.function-call.arguments.just
    - include: group-end
    - include: just-expressions
    - match: ({{valid_name}})\s*
      captures:
        1: variable.parameter.just


###[ GROUPS ]##################################################################

  groups:
    - match: \(
      scope: punctuation.section.group.begin.just
      push: group-body

  group-end:
    - match: \)
      scope: punctuation.section.group.end.just
      pop: 1
    - include: just-expression-end

  group-body:
    - meta_scope: meta.group.just
    - include: group-end
    - include: just-expressions


###[ IF STATEMENT ]###########################################################

  if-statements:
    - match: 'if(?=\s+)'
      scope: meta.statement.conditional.if.just keyword.control.conditional.if.just
      set:
        - if-statement-body
        - if-statement-conditional

  if-statement-conditional:
    - meta_content_scope: meta.statement.conditional.if.just
    - meta_include_prototype: false
    - match: ''
      push:
        - if-statement-conditional-body
        - if-statement-comparison-operator
        - if-statement-conditional-body

  if-statement-body:
    - meta_content_scope: meta.statement.conditional.if.just
    - meta_include_prototype: false
    - match: (?={)
      push:
        - if-statement-block-end
        - if-statement-block
        - if-statement-else
        - if-statement-block
    - include: else-pop

  if-statement-conditional-body:
    - match: (?={)
      comment: Clean up the conditional-body AND conditional contexts
      pop: 2
    - match: (?=!=|==)
      pop: 1
    - include: just-expressions

  if-statement-comparison-operator:
    - match: '!=|=='
      scope: keyword.operator.comparison.just
      pop: 1

  if-statement-block:
    - match: '{'
      scope: punctuation.section.block.begin.just
    - match: '}'
      scope: punctuation.section.block.end.just
      pop: 1
    - include: just-expressions

  if-statement-else:
    - match: 'else'
      scope: keyword.control.conditional.else.just
    - match: (?={)
      pop: 1

  if-statement-block-end:
    - match: ''
      pop: 1


###[ OPERATORS ]###############################################################

  operators:
    - include: punctuation-separators
    - match: '(\+|\/)'
      scope: keyword.operator.arithmetic.just

  punctuation-separators:
    - match: ','
      scope: punctuation.separator.sequence.just


###[ CHARACTERS ]##############################################################

  strings:
    - match: '`'
      push:
        - meta_scope: string.quoted.backtick.just
        - match: \\.
          scope: constant.character.escape.just
        - match: '`'
          pop: 1
    - match: '"'
      push:
        - meta_scope: string.quoted.double.just
        - match: \\.
          scope: constant.character.escape.just
        - match: '"'
          pop: 1
    - match: "'"
      push:
        - meta_scope: string.quoted.single.just
        - match: \\.
          scope: constant.character.escape.just
        - match: "'"
          pop: 1


###[ VARIABLES ]##############################################################

  operands-variables:
    - match: \b(?:{{valid_name}})\b
      scope: variable.other.just


###[ VARIABLE ASSIGNMENT ]#####################################################

  assignment:
    - match: '(export)?\s*({{valid_name}})\s*(?=:=)'
      captures:
        1: keyword.declaration.variable.just
        2: variable.other.just
      push: assignment-value

  assignment-value:
    - meta_include_prototype: false
    - match: :=
      scope: keyword.operator.assignment.just
      set: assignment-value-body

  assignment-value-body:
    - include: eol-pop
    - include: just-expressions


###[ RECIPES ]################################################################
# Recipe definition lines, including attributes, arguments and prerequisites

  recipe-attribute:
    - match: '^\[\s*({{recipe_attributes}})\s*\]\s*$' # Only one attribute allowed per line
      scope: meta.annotation.just variable.annotation.just
#   recipe-definition:
#     - meta_scope: entity.name.function.just
#     - match: '(?=^@?{{valid_name}}[^:]*:[^=])' # Matches 'recipeName:' but not 'varName :='
#       push:
#         - recipe-prerequisites
#         - recipe-assignment
#         - recipe-argument
#         - recipe-name
#         - recipe-modifier
#   recipe-modifier:
#     - match: '^@'
#       scope: storage.modifier.just
#     - include: else-pop
#   recipe-assignment:
#     - match: ':'
#       scope: keyword.operator.assignment.just
#     - include: eol-pop
#     - include: else-pop
#   recipe-name:
#     - match: '\b{{valid_name}}\b'
#       scope: entity.name.function.just
#       pop: 1 # Only match the first instance
#     - include: else-pop
#   recipe-argument:
#     - meta_scope: meta.function-call.arguments.just
#     - match: '(?=[\+\*$a-zA-Z_])'
#       push:
#         - recipe-argument-assignment
#         - recipe-argument-name
#         - recipe-variadic-operator
#         - recipe-export-operator
#     - include: else-pop
#   recipe-variadic-operator:
#     - match: '[\+\*]'
#       scope: keyword.operator.variadic.just
#     - include: else-pop
#   recipe-export-operator:
#     - match: '\$'
#       scope: keyword.operator.exported.just
#     - include: else-pop
#   recipe-argument-assignment:
#     - match: '='
#       scope: keyword.operator.assignment.just
#       push:
#         - variable-name
#         - recipe-argument-value-quoted
#     - include: else-pop
#   recipe-argument-name:
#     - match: '\b{{valid_name}}\b'
#       scope: variable.parameter.just
#     - include: else-pop
#   recipe-argument-value-quoted:
#     - include: strings
#     - include: else-pop

#   recipe-prerequisites:
#     - match: '\b{{valid_name}}\b'
#       scope: string.unquoted.just
#     - include: eol-pop
#     - include: else-pop
#   recipe-content:
#     - match: '^\s+(@|-|@-|-@)'
#       captures:
#         1: storage.modifier.just
#     - include: recipe-shebang
#   recipe-shebang:
#     - match: '\s#\!'
#       comment: The #! lines within a recipe.
#       push:
#         - meta_scope: comment.line.shebang.just
#         - match: $
#           pop: 1

# ###[ Set Expressions ]########################################################
# # Ex: "set shell := ['zsh', '-cu']", "set dotenv-load", "set export := false"

#   settings:
#     - match: '\bset\b'
#       scope: storage.modifier.definition.just
#       push:
#         - settings-boolean
#         - settings-shell
#         - settings-string
#   settings-boolean:
#     - match: '\b{{boolean_settings}}\b'
#       scope: entity.name.definition.just
#       push:
#         - constant-boolean
#         - assignment-operator
#     - include: else-pop
#   settings-string:
#     - match: '\b{{string_settings}}\b'
#       scope: entity.name.definition.just
#       push:
#         - assignment-operator
#     - include: strings
#     - include: else-pop
#   settings-shell:
#     - match: '\b{{shell_settings}}\b'
#       scope: entity.name.definition.just
#       push:
#         - string-array
#         - assignment-operator
#     - include: else-pop
#   constant-boolean:
#     - match: '(true|false)'
#       scope: constant.language.boolean.just
#       pop: 1
#     - include: else-pop
#   string-array:
#     - match: '\['
#       scope: punctuation.section.brackets.start.just
#     - match: ','
#       scope: punctuation.separator.parameters.just
#     - match: '\]'
#       scope: punctuation.section.brackets.end.just
#       pop: 1
#     - include: strings

# ###[ General Types ]##########################################################

  variable-name:
    - match: '\b{{valid_name}}\b'
      scope: variable.other.just
    - include: else-pop

###[ Common Prototypes ]#######################################################

  line-end:
    - match: $
      pop: 1

# Remove the current stack item when we're about to reach a new character
# Learn more: https://github.com/sublimehq/Packages/issues/757#issuecomment-287193733
  else-pop:
    - match: (?=\S)
      pop: 1

  eol-pop:
    - match: '$\n?'
      pop: 1
